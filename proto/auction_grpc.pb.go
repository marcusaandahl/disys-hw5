// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/auction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionHouseClient is the client API for AuctionHouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionHouseClient interface {
	Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidAck, error)
	Result(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResultRes, error)
	ResultStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AuctionHouse_ResultStreamClient, error)
	UpdateServer(ctx context.Context, in *ServerState, opts ...grpc.CallOption) (*UpdateServerAck, error)
}

type auctionHouseClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionHouseClient(cc grpc.ClientConnInterface) AuctionHouseClient {
	return &auctionHouseClient{cc}
}

func (c *auctionHouseClient) Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidAck, error) {
	out := new(BidAck)
	err := c.cc.Invoke(ctx, "/proto.AuctionHouse/Bid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionHouseClient) Result(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResultRes, error) {
	out := new(ResultRes)
	err := c.cc.Invoke(ctx, "/proto.AuctionHouse/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionHouseClient) ResultStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AuctionHouse_ResultStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionHouse_ServiceDesc.Streams[0], "/proto.AuctionHouse/ResultStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionHouseResultStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuctionHouse_ResultStreamClient interface {
	Recv() (*ResultRes, error)
	grpc.ClientStream
}

type auctionHouseResultStreamClient struct {
	grpc.ClientStream
}

func (x *auctionHouseResultStreamClient) Recv() (*ResultRes, error) {
	m := new(ResultRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auctionHouseClient) UpdateServer(ctx context.Context, in *ServerState, opts ...grpc.CallOption) (*UpdateServerAck, error) {
	out := new(UpdateServerAck)
	err := c.cc.Invoke(ctx, "/proto.AuctionHouse/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionHouseServer is the server API for AuctionHouse service.
// All implementations must embed UnimplementedAuctionHouseServer
// for forward compatibility
type AuctionHouseServer interface {
	Bid(context.Context, *BidRequest) (*BidAck, error)
	Result(context.Context, *emptypb.Empty) (*ResultRes, error)
	ResultStream(*emptypb.Empty, AuctionHouse_ResultStreamServer) error
	UpdateServer(context.Context, *ServerState) (*UpdateServerAck, error)
	mustEmbedUnimplementedAuctionHouseServer()
}

// UnimplementedAuctionHouseServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionHouseServer struct {
}

func (UnimplementedAuctionHouseServer) Bid(context.Context, *BidRequest) (*BidAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedAuctionHouseServer) Result(context.Context, *emptypb.Empty) (*ResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedAuctionHouseServer) ResultStream(*emptypb.Empty, AuctionHouse_ResultStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ResultStream not implemented")
}
func (UnimplementedAuctionHouseServer) UpdateServer(context.Context, *ServerState) (*UpdateServerAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedAuctionHouseServer) mustEmbedUnimplementedAuctionHouseServer() {}

// UnsafeAuctionHouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionHouseServer will
// result in compilation errors.
type UnsafeAuctionHouseServer interface {
	mustEmbedUnimplementedAuctionHouseServer()
}

func RegisterAuctionHouseServer(s grpc.ServiceRegistrar, srv AuctionHouseServer) {
	s.RegisterService(&AuctionHouse_ServiceDesc, srv)
}

func _AuctionHouse_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionHouseServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuctionHouse/Bid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionHouseServer).Bid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionHouse_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionHouseServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuctionHouse/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionHouseServer).Result(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionHouse_ResultStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionHouseServer).ResultStream(m, &auctionHouseResultStreamServer{stream})
}

type AuctionHouse_ResultStreamServer interface {
	Send(*ResultRes) error
	grpc.ServerStream
}

type auctionHouseResultStreamServer struct {
	grpc.ServerStream
}

func (x *auctionHouseResultStreamServer) Send(m *ResultRes) error {
	return x.ServerStream.SendMsg(m)
}

func _AuctionHouse_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionHouseServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuctionHouse/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionHouseServer).UpdateServer(ctx, req.(*ServerState))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionHouse_ServiceDesc is the grpc.ServiceDesc for AuctionHouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionHouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuctionHouse",
	HandlerType: (*AuctionHouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bid",
			Handler:    _AuctionHouse_Bid_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _AuctionHouse_Result_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _AuctionHouse_UpdateServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResultStream",
			Handler:       _AuctionHouse_ResultStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/auction.proto",
}
